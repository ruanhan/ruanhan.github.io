{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2020-08-20T05:55:31.000Z","updated":"2020-08-20T07:19:22.806Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-08-20T05:58:38.000Z","updated":"2020-08-20T07:18:21.424Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"browser-sync","slug":"browser-sync","date":"2020-12-21T06:07:39.000Z","updated":"2020-12-21T06:13:40.563Z","comments":true,"path":"2020/12/21/browser-sync/","link":"","permalink":"http://yoursite.com/2020/12/21/browser-sync/","excerpt":"","text":"全局安装sudo npm install -g browser-sync 快速使用1234# 启动服务器 监听所有的html文件$ browser-sync start --server --files \"*.html\"# 启动服务器 监听所有的文件$ browser-sync start --server --files \"**\" 启动browser-sync start --server --port 3333 --files &quot;*.css,*.html,*.js&quot; start options1234567891011121314151617181920212223242526272829--help #输出使用信息--version #输出的版本号--browser #选择哪个浏览器应该是自动打开--files #文件路径看--exclude #文件模式忽视--server #运行本地服务器（使用您的CWD作为Web根）--index #指定哪些文件应该被用作索引页--extensions #指定文件扩展名回退--startPath #指定起始路径，打开浏览器--https #启用S​​SL地方发展--directory #显示服务器的目录列表--proxy #代理现有的服务器--xip #使用xip.io域路由--tunnel #使用公共网址--open #选择哪个URL是自动打开（本地，外部或隧道）--config #指定为BS-config.js文件的路径--host #指定主机名使用--logLevel #设置记录器输出电平（沉默，信息或调试）--port #指定要使用的端口--reload-delay #以毫秒为单位的时间延迟重装事件以下文件的变化--reload-debounce #限制在浏览器中的频率：刷新事件可以被发射到连接的客户机--ui-port #指定端口的UI使用--no-notify #禁用浏览器的通知元素--no-open #不要打开一个新的浏览器窗口--no-online #强制离线使用--no-ui #不要启动用户界面--no-ghost-mode #禁用幽灵模式--no-inject-changes #刷新上的每个文件更改--no-reload-on-restart #不要自动重新加载在重新启动所有浏览器","categories":[{"name":"tools","slug":"tools","permalink":"http://yoursite.com/categories/tools/"}],"tags":[{"name":"server","slug":"server","permalink":"http://yoursite.com/tags/server/"}]},{"title":"gitlab3","slug":"gitlab3","date":"2020-12-17T07:30:43.000Z","updated":"2020-12-18T05:40:47.918Z","comments":true,"path":"2020/12/17/gitlab3/","link":"","permalink":"http://yoursite.com/2020/12/17/gitlab3/","excerpt":"","text":"gitlab 分支策略 考虑到gitlab一般在企业内部使用，一般不存在社区开发者，所以在管理上不会采用github的upstream/origin双仓库模式。gitlab下，开发者们面向一个仓库进行提交即可； 设置对分支的保护权限 顾名思义，分支的权限必不可少，它可以约束开发者们的提交行为和提交策略。避免失误操作将未测试过的代码强制提交到生产分支；developer可以不关心； issue与Milestones issue可以理解为一个最小原子的任务，多个任务组成一个 milestones；Milestones 可以理解为某个时间区间内的任务集；一个Milestones可包含多个issue； 当该Milestones中所有issue完成，则标志着此Milestones的结束； 创建issue和mr 创建一个issue 关联一个mr branch name branch name 会以issue的序号开始，然后抓取title中的英文和数字做连接。 可采用index-categroy-content-[username]-[time]的自定义方式，括号部分可选 category feature bugfix chore enhance content，一到三个词简述任务 username，任务认领人 time，创建分支的时间，一般 201217或者1225 source 基于什么分支创建当前分支，feature/chore/enhance选择dev-0.3, bugfix选择env-dev 提交代码流程 123456git fetch # 获取issue关联的分支名git checkout -b 6-feature-pivotDrill origin/6-feature-pivotDrill # 基于远端新建一个本地开发分支git rebase dev-0.3 # 在开发过程中，不定时rebase 宿主分支，防止版本隔断git push origin 6-feature-pivotDrill # 提交至远程映射# 通知maintainer完成代码合并，并关闭issue commits规范&#39;type(module) some desc&#39; 1234567891011121314151617181920212223242526type = [ \"build\", // 构建执行 \"chore\", // 构建工具相关 \"ci\", // CI 相关 \"docs\", // 文档更新 \"feat\", // 新功能 \"fix\", // bug 修复 \"perf\", // 性能优化 \"refactor\", // 功能重构 \"release\", \"revert\", // 回滚操作 \"style\", // 样式变动 \"test\", // 单元测试]moduele = [ // 以davinci为例,只列出前端模块 \"project\", \"dashboard\", \"display\", \"widget\", \"schdule\", \"view\", \"source\", \"user\"] review代码的参考标准 格式化后的代码，在vscode中安装prettier工具，设置ctrl+s默认对当前页进行prettier格式化； 所有commits必须要关联issue，如果没有issue要新建issue然后关联mr（merge request），基于当前mr提交代码； 原则上，不能有肉眼可见的bug，一般review代码时会进行简单的测试； 其他规则（代码规范） 代码规范 原则上，所有新提交的代码参考项目代码风格即可。简述为下面几个方面 原则上，变量名含义精准，（ps：严禁全局作用域中出现单字符命名空间；） 不要求一定要加注释或者不加注释，我们的愿景是能够书写无注释就能看懂的代码。根据业务逻辑难易程度，自行决定。 尽量英文注释； 不建议提交大量重复代码，须做好代码的抽象复用； 尽量使用被主流浏览器支持的的es规范书写代码，原则上新es规范下已有的工具类和函数，不重复造轮子； 其他涉及html/css/javascript相关的推荐规范会渐进式纳入规范集；","categories":[{"name":"project","slug":"project","permalink":"http://yoursite.com/categories/project/"}],"tags":[{"name":"gitlab","slug":"gitlab","permalink":"http://yoursite.com/tags/gitlab/"}]},{"title":"gitlab2","slug":"gitlab2","date":"2020-12-16T10:41:24.000Z","updated":"2020-12-18T05:41:03.023Z","comments":true,"path":"2020/12/16/gitlab2/","link":"","permalink":"http://yoursite.com/2020/12/16/gitlab2/","excerpt":"","text":"label 标签组 标签组的意义就是定义一次，多个项目统一使用 Platform 前端还是后端，ios 还是 android angular node Problems 目前产品中存在的问题，以及该问题的优先级程度 bug： 常规bug security： 安全漏洞 production： 涉及到生产环境 Mindless 影响较小的任务，比如更改文件夹目录，适配规范 chore legal Experience 影响用户体验，或者用户对产品的理解. These can be both opportunities and “UX bugs”. copy design ux: User Experience Environment 服务器环境，开发环境，生产环境或者测试环境 staging test Feedback 待确认的问题，比如一些拍脑袋的需求；或者某个需求我们还没决定怎么实现 discussion question： 还没到需要讨论的情况 rfc Improvements 现有功能或基础架构上的迭代。 enhancement: 现有模块有更高的完成度 optimization: 现有功能代码层面的重构，或者交互流程上的梳理 Additions 新功能，新页面 feature Pending 现在不好说，未来肯定有结果，可能做成功， 可能做不成； in progress： 进行中的需求 watchlist： 先拖着的需求，有可能就拖掉了 Inactive 无需采取任何行动或可能采取任何行动。该问题已解决，可以通过其他问题更好地解决； invalid： 无效的 wontfix： 不会修复 duplicate： 重复 on hold： 等待候听","categories":[{"name":"project","slug":"project","permalink":"http://yoursite.com/categories/project/"}],"tags":[{"name":"gitlab","slug":"gitlab","permalink":"http://yoursite.com/tags/gitlab/"}]},{"title":"gitlab 使用","slug":"gitlab-使用","date":"2020-12-16T06:52:39.000Z","updated":"2020-12-18T05:43:13.922Z","comments":true,"path":"2020/12/16/gitlab-使用/","link":"","permalink":"http://yoursite.com/2020/12/16/gitlab-%E4%BD%BF%E7%94%A8/","excerpt":"","text":"软件开发阶段 软件开发十个阶段在gitlab中对应的管理方式方法 IDEA： 每一个从点子开始的项目，通常来源于一次闲聊。在这个阶段，GitLab 集成了Mattermost 它类似一个聊天工具。 ISSUE： 最有效的讨论一个点子的方法，就是为这个点子建立一个工单讨论。你的团队和你的合作伙伴可以在工单追踪器issue tracker中帮助你去提升这个点子。 PLAN： 一旦讨论得到一致的同意，就是开始编码的时候了。但是等等！首先，我们需要优先考虑组织我们的工作流。对于此，我们可以使用工单看板Issue Board。 CODE： 现在，当一切准备就绪，我们可以开始写代码了。 COMMIT： 当我们为我们的初步成果欢呼的时候，我们就可以在版本控制下，提交代码到功能分支了。 TEST： 通过GitLab CI，我们可以运行脚本来构建和测试我们的应用。 REVIEW： 一旦脚本成功运行，我们测试和构建成功，我们就可以进行代码复审code review以及批准。 STAGING：： 预发布环境。 PRODUCTION： 当一切都如预期，就是部署到生产环境的时候了。 FEEDBACK： 现在是时候返回去看我们项目中需要提升的部分了。我们使用周期分析 Cycle Analytics来对当前项目中关键的部分进行的反馈 issue 和 milestone milestone里程碑，用来标识\b阶段性目标， 对目标进行细化，化整为零一个个的issues，然后根据每个issues的紧急程度选择性的完成。等所有issues解决完之后 就标志着阶段性目标已完成； 使用方法 把实际问题转化为issue，这些问题可以标记为正在解决和计划解决； milestone对应着阶段性项目计划，然后细分为多个issues，而且可以指定完成时间，gitlab会自动生成完成进度情况概略图。 issues也可以是一个建议，共给大家一起讨论； milestone 和issue建立时我们通常可以对问题进行简单描述，并且记录问题的解决过程，包括他人提出的疑问也可以在这里记录，后期可以随时查看； 创建milestone 可以在项目开始前创建milestone，后面建issues时关联它，也可以先建issues，后期由项目负责人建milestone，然后把所有issues关联过来； 创建一个名字 简单描述，简述创建的原因，这个里程碑最终的目的，编辑的时候可以直接贴图，也可以添加附件（支持markdown格式，可以预览） 指定计划的完成时间； 新建issues 一个issues表示一个功能、一个bug、一个建议; 新建议题很简单，标题+描述+计划时间+指定人+里程碑，里程碑一定要指定一下，还可以加标签。 功能：里程碑的细分，尽量小，方便merger时的代码审核； bug：解决程序中存在的某些问题； 建议：可以作为一个讨论交流区，也可以实现它; 一个issues 对应一个指定人，一个git 分支；","categories":[{"name":"project","slug":"project","permalink":"http://yoursite.com/categories/project/"}],"tags":[{"name":"gitlab","slug":"gitlab","permalink":"http://yoursite.com/tags/gitlab/"}]},{"title":"nginx","slug":"test","date":"2020-12-09T14:19:03.750Z","updated":"2020-12-18T05:42:10.435Z","comments":true,"path":"2020/12/09/test/","link":"","permalink":"http://yoursite.com/2020/12/09/test/","excerpt":"","text":"配置hexo到阿里云 网上大多数教程问题不大，额外需要注意修改一些文件的写入权限 1234567# 将post-receive 设置为可执行文件chmod +x ~/hexo.git/hooks/post-receivecd ~# 设置博客源地址文件夹权限，不然git hooks写入不了，Unable to unlink 就是这种原因sudo chmod -R 777 /home/www/hexo","categories":[{"name":"tools","slug":"tools","permalink":"http://yoursite.com/categories/tools/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/tags/markdown/"},{"name":"doc","slug":"doc","permalink":"http://yoursite.com/tags/doc/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"hexo","slug":"hello-world","date":"2020-06-04T03:45:32.772Z","updated":"2020-12-18T05:41:36.853Z","comments":true,"path":"2020/06/04/hello-world/","link":"","permalink":"http://yoursite.com/2020/06/04/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy test12345function helloworld() &#123; return 'hello world'&#125;console.log(helloworld); More info: Deployment","categories":[{"name":"tools","slug":"tools","permalink":"http://yoursite.com/categories/tools/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/tags/markdown/"},{"name":"doc","slug":"doc","permalink":"http://yoursite.com/tags/doc/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}],"categories":[{"name":"tools","slug":"tools","permalink":"http://yoursite.com/categories/tools/"},{"name":"project","slug":"project","permalink":"http://yoursite.com/categories/project/"}],"tags":[{"name":"server","slug":"server","permalink":"http://yoursite.com/tags/server/"},{"name":"gitlab","slug":"gitlab","permalink":"http://yoursite.com/tags/gitlab/"},{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/tags/markdown/"},{"name":"doc","slug":"doc","permalink":"http://yoursite.com/tags/doc/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}